using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using System.Text.RegularExpressions;

namespace Dynamic.Script_8DA291A3F415763
{
	// Script generated by Pega Robot Studio 19.1.105.0
	// Please use caution when modifying class name, namespace or attributes
	[OpenSpan.TypeManagement.DynamicTypeAttribute()]
	[OpenSpan.Design.ComponentIdentityAttribute("Script-8DA291A3F415763")]
	public sealed class Script
	{
		public string GetLogNumber(string Message)
		{
			string LogNumber = "";
            Match match = Regex.Match(Message, "(\\d{3,4}) (\\d{3,4})");
            if(match.Length > 0){
                LogNumber = match.Value;
            }
            return LogNumber;
		}

		public string GetReturnNumber(string Message){
			string returnNum = "";
            Match match = Regex.Match(Message, "R\\d{6}");
            if(match.Length > 0){
                returnNum = match.Value;
            }
            return returnNum;
		
		}

		public bool CheckForNextPageiv03(int Counter){
			for(int i = 1; i < 50; i++){
				if(Counter == 8*i + 1){
					return true;
				}
			}
			return false;
		}

		public bool CheckForNextPagein01(int Counter){
			for(int i = 1; i < 50; i++){
				if(Counter == 9*i + 1){
					return true;
				}
			}
			return false;
		}

		public bool CheckForNextPageiv04(int Counter){
			for(int i = 1; i < 10; i++){
				if(Counter == 11*i + 1){
					return true;
				}
			}
			return false;
		}

		public bool isEqual(int a, int b){
			if(a == b){
				return true;
			}
			else{
				return false;
			}

		}

		public void startRapid(string path){
			System.Diagnostics.Process proc = new System.Diagnostics.Process();
			proc.StartInfo.FileName = path;
			proc.Start();
		}

		public string cleanInvoice(string invoice){
			string letters = invoice.Split(' ')[0];
            string numbers = invoice.Split(' ')[1];
            if(letters.Length == 1){
                letters = " " + letters;
            }
            if(numbers.Length != 5){
                int diff = 5 - numbers.Length;
                for(int i = 0; i < diff; i++){
                    numbers = "0" + numbers;
                }
            }
            return letters + numbers;


            //invoice = invoice.Trim();
            //Match twoChar = Regex.Match(invoice, "[A-z]{2} \\d{1,5}");
            //if(twoChar.Length > 0){ //Invoice starts with two characters
            //    invoice = invoice.Replace(" ", "");
            //}
            //else{
            //    Match oneChar = Regex.Match(invoice, "[A-z] \\d{1,5}");
            //    if(oneChar.Length > 0){ //Invoice starts with one char and we need a space at the beginning for RAPID entry
            //        invoice = invoice.Replace(" ", "");
            //        invoice = invoice.Insert(0, " ");
            //    }
            //}   

			//if(invoice.

            //return invoice;

        }

		public string cleanItemNum(string itemNum, bool iv03){
            if(itemNum.Length == 8){
                itemNum = itemNum.Substring(1);
            } 
            else if(itemNum.Length == 9){
                itemNum = itemNum.Substring(2);
            }
            else{
                return itemNum;
            }

            if(iv03){
                for(int i = itemNum.Length; i < 8; i++){
                    itemNum = "0" + itemNum;
                }
            }
            else{
                for(int i = itemNum.Length; i < 7; i++){
                    itemNum = "0" + itemNum;
                }
            }
            
            return itemNum;
        }

		public void ExecuteCommand(string command){
            System.Diagnostics.Process.Start(command);

        }
	}
}
